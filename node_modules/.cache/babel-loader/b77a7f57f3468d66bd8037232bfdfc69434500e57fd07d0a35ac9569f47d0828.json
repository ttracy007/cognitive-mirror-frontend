{"ast":null,"code":"// supabaseClient.js\nimport { createClient } from '@supabase/supabase-js';\nexport const supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_ANON_KEY);\n\n// ---- username helpers (single source of truth) ----\nconst USERNAME_KEY = 'cm_username';\nexport const UsernameStore = {\n  set(name) {\n    localStorage.setItem(USERNAME_KEY, name);\n  },\n  get() {\n    return localStorage.getItem(USERNAME_KEY) || '';\n  },\n  clear() {\n    localStorage.removeItem(USERNAME_KEY);\n  }\n};\n\n// ---- session bootstrap + listener (rehydrates on refresh) ----\nexport async function getBootSession() {\n  var _data$session;\n  const {\n    data\n  } = await supabase.auth.getSession();\n  return (_data$session = data === null || data === void 0 ? void 0 : data.session) !== null && _data$session !== void 0 ? _data$session : null;\n}\n\n// subscribe once per app boot (call from App.js useEffect)\nexport function subscribeAuth(onChange) {\n  const {\n    data: sub\n  } = supabase.auth.onAuthStateChange((_event, session) => {\n    onChange(session || null);\n  });\n  return () => sub.subscription.unsubscribe();\n}","map":{"version":3,"names":["createClient","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","USERNAME_KEY","UsernameStore","set","name","localStorage","setItem","get","getItem","clear","removeItem","getBootSession","_data$session","data","auth","getSession","session","subscribeAuth","onChange","sub","onAuthStateChange","_event","subscription","unsubscribe"],"sources":["/Users/mac/Projects/cognitive-mirror-frontend-dev/src/supabaseClient.js"],"sourcesContent":["// supabaseClient.js\nimport { createClient } from '@supabase/supabase-js';\n\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\n// ---- username helpers (single source of truth) ----\nconst USERNAME_KEY = 'cm_username';\n\nexport const UsernameStore = {\n  set(name) { localStorage.setItem(USERNAME_KEY, name); },\n  get()     { return localStorage.getItem(USERNAME_KEY) || ''; },\n  clear()   { localStorage.removeItem(USERNAME_KEY); }\n};\n\n// ---- session bootstrap + listener (rehydrates on refresh) ----\nexport async function getBootSession() {\n  const { data } = await supabase.auth.getSession();\n  return data?.session ?? null;\n}\n\n// subscribe once per app boot (call from App.js useEffect)\nexport function subscribeAuth(onChange) {\n  const { data: sub } = supabase.auth.onAuthStateChange((_event, session) => {\n    onChange(session || null);\n  });\n  return () => sub.subscription.unsubscribe();\n}\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,OAAO,MAAMC,QAAQ,GAAGD,YAAY,CAClCE,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAClCF,OAAO,CAACC,GAAG,CAACE,2BACd,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG,aAAa;AAElC,OAAO,MAAMC,aAAa,GAAG;EAC3BC,GAAGA,CAACC,IAAI,EAAE;IAAEC,YAAY,CAACC,OAAO,CAACL,YAAY,EAAEG,IAAI,CAAC;EAAE,CAAC;EACvDG,GAAGA,CAAA,EAAO;IAAE,OAAOF,YAAY,CAACG,OAAO,CAACP,YAAY,CAAC,IAAI,EAAE;EAAE,CAAC;EAC9DQ,KAAKA,CAAA,EAAK;IAAEJ,YAAY,CAACK,UAAU,CAACT,YAAY,CAAC;EAAE;AACrD,CAAC;;AAED;AACA,OAAO,eAAeU,cAAcA,CAAA,EAAG;EAAA,IAAAC,aAAA;EACrC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAACC,UAAU,CAAC,CAAC;EACjD,QAAAH,aAAA,GAAOC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,OAAO,cAAAJ,aAAA,cAAAA,aAAA,GAAI,IAAI;AAC9B;;AAEA;AACA,OAAO,SAASK,aAAaA,CAACC,QAAQ,EAAE;EACtC,MAAM;IAAEL,IAAI,EAAEM;EAAI,CAAC,GAAGvB,QAAQ,CAACkB,IAAI,CAACM,iBAAiB,CAAC,CAACC,MAAM,EAAEL,OAAO,KAAK;IACzEE,QAAQ,CAACF,OAAO,IAAI,IAAI,CAAC;EAC3B,CAAC,CAAC;EACF,OAAO,MAAMG,GAAG,CAACG,YAAY,CAACC,WAAW,CAAC,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}